# -*- coding: utf-8 -*-
"""GPT(character level model)ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tIM0QRPjhvlN5FfyaQ4vnAHBl1K4UjR7
"""

!git clone https://github.com/karpathy/ng-video-lecture

with open("/content/ng-video-lecture/input.txt","r") as f:
  text = f.read()

print("length of dataset in characters" , len(text))

print(text[:1000])

"""### **Basic Model**"""

chars = sorted(list(set(text)))
vocab_size = len(chars)
print("".join(chars))
print(vocab_size)

stoi = {ch:i for i,ch in enumerate(chars)}
itos = {i:ch for i,ch in enumerate(chars)}

encode = lambda s: [stoi[c] for c in s]
decode = lambda l: ''.join([itos[i] for i in l])

encode("Hi there")

decode(encode("Hi there"))

#encoding whole text data to number

import torch
data = torch.tensor(encode(text),dtype = torch.long)
print(data.shape)
data[:1000]

#splitting the data 

n = int(0.9 * len(data))
train_data = data[:n]
val_data = data[n:]

block_size = 8
x = train_data[:block_size]
y = train_data[1:block_size + 1]
for t in  range(block_size):
  context = x[:t+1]
  target = y[t]
  print(f"when input is {context} the target is :{target}")

#time dimension 
#in chunks of 9 character there are 9 diiffernt example hidden in this .

#batch dimension - to use of gpu parellely 
torch.manual_seed(1337)
batch_size = 4
block_size = 8

def get_batch(split):
  #generate a small batch of data of inputs x and target y
  data = train_data if split == 'train' else val_data
  ix = torch.randint(len(data) - block_size,(batch_size,))
  x = torch.stack([data[i:i+block_size] for i in ix])
  y = torch.stack([data[i+1:i+block_size+1] for i in ix])
  return x,y

xb,yb = get_batch('train')
print('inputs:')
print(xb.shape)
print(xb)
print('tragets:')
print(yb.shape)
print(yb)

ix = torch.randint(len(data) - block_size,(batch_size,))

ix

#Bigram Language model 

import torch 
import torch.nn as nn
from torch.nn import functional as F
torch.manual_seed(1337)

class BigramLanguageModel(nn.Module):
  def __init__(self,vocab_size):
    super().__init__()
    self.token_embedding_table = nn.Embedding(vocab_size,vocab_size)
    #each token directly reads off the logits for the next token from a lookup table
  def forward(self,idx,targets=None):
      logits = self.token_embedding_table(idx)
      if targets is None:
        loss = None
      else:
        B,T,C = logits.shape
        logits = logits.view(B*T,C)
        targets = targets.view(B*T)
        loss = F.cross_entropy(logits,targets)
      return logits,loss

  def generate(self,idx,max_new_tokens):
    for _ in range(max_new_tokens):
      logits , loss = self(idx)  #call forward 
      logits = logits[:,-1,:] #become B,C
      probs = F.softmax(logits,dim=-1)
      #sample from distribution
      idx_next = torch.multinomial(probs,num_samples=1)

      idx = torch.cat((idx,idx_next),dim=1)
    return idx

m = BigramLanguageModel(vocab_size)
logits , loss = m(xb,yb)
print(loss.shape,logits.shape)

print(decode(m.generate(idx = torch.zeros((1,1),dtype = torch.long),max_new_tokens=100)[0].tolist()))

print(loss)

optimizer = torch.optim.AdamW(m.parameters(),lr=1e-3)

batch_size = 32
for steps in range(100000):

  xb,yb = get_batch('train')
  logits,loss = m(xb,yb)
  optimizer.zero_grad(set_to_none=True)
  loss.backward()
  optimizer.step()
print(loss.item())

print(decode(m.generate(idx = torch.zeros((1,1),dtype = torch.long),max_new_tokens=100)[0].tolist()))

